class MyModel(LabelStudioMLBase):
    def predict(self, tasks, **kwargs):
        output_predictions = []

        for task in tasks:
            # Assuming there's an 'image' field in your Label Studio task data
            image_data = task.get('data', {}).get('image')

            if image_data:
                # Convert the base64 image data to a PIL Image
                img = Image.open(io.BytesIO(base64.b64decode(image_data))

                # Use your image classification function to get the predicted label
                predicted_label = classify_image(img)

                # Create a Label Studio-compatible output format
                output = {
                    'result': {
                        'predictions': [{'label': predicted_label}],
                    },
                    'score': 1.0,  # You can adjust this score as needed
                }
            else:
                # Handle cases where no image data is provided
                output = {
                    'result': {
                        'predictions': [],
                    },
                    'score': 0.0,
                }

            output_predictions.append(output)

        return output_predictions
