cfrom confluent_kafka import Producer
import json

class KafkaProducer:
    def __init__(self, bootstrap_servers, topic):
        self.producer = Producer({
            'bootstrap.servers': bootstrap_servers
        })
        self.topic = topic

    def delivery_report(self, err, msg):
        if err is not None:
            print('Message delivery failed: {}'.format(err))
        else:
            print('Message delivered to {} [{}]'.format(msg.topic(), msg.partition()))

    def produce_message(self, key, value):
        # Produce a message to the specified topic
        self.producer.produce(self.topic, key=key, value=value, callback=self.delivery_report)
        self.producer.poll(0)  # Trigger the delivery report callback

    def close(self):
        self.producer.flush()



if __name__ == '__main__':
    # Define your Kafka server and topic
    bootstrap_servers = 'localhost:9092'  # Change to your Kafka server's address
    topic = 'my_topic'

    # Create a KafkaProducer instance
    producer = KafkaProducer(bootstrap_servers, topic)

    # Produce a sample message
    message_key = 'key'
    message_value = json.dumps({'message': 'Hello, Kafka!'})

    producer.produce_message(message_key, message_value)

    # Close the producer when done
    producer.close()


