import json

def validate_json(message):
    try:
        data = json.loads(message)
        assert isinstance(data, dict), "Invalid JSON format."
    except json.JSONDecodeError:
        assert False, "Invalid JSON format."
    return data

def validate_consumed_data(data):
    assert all(field in data for field in ["mmsi", "is_fishing", "label", "sublabel", "length", "tonnage", "list_sources", "with_ranges"]), "Missing fields in the consumed data."
    return True

def validate_unprocessed_data(data):
    return validate_consumed_data(data)

def validate_bronze_data(data):
    return validate_consumed_data(data)

def validate_silver_data(data):
    return validate_consumed_data(data)

def validate_gold_data(data):
    return validate_consumed_data(data)

message = '''{
    "mmsi": 611,
    "is_fishing": "fishing",
    "label": "fixed gear",
    "sublabel": "set gearnets",
    "length": "11.80",
    "tonnage": "24.43",
    "list_sources": "eu_fishing",
    "with_ranges": "false"
}'''

try:
    validated_data = validate_json(message)
    validate_consumed_data(validated_data)
    print("Consumed data is valid.")
except AssertionError as e:
    print("Error validating consumed data:", e)

try:
    validate_unprocessed_data(validated_data)
    print("Unprocessed data is valid.")
except AssertionError as e:
    print("Error validating unprocessed data:", e)

try:
    validate_bronze_data(validated_data)
    print("Bronze data is valid.")
except AssertionError as e:
    print("Error validating bronze data:", e)

try:
    validate_silver_data(validated_data)
    print("Silver data is valid.")
except AssertionError as e:
    print("Error validating silver data:", e)

try:
    validate_gold_data(validated_data)
    print("Gold data is valid.")
except AssertionError as e:
    print("Error validating gold data:", e)


try:
    with open("produced_message.json", "r") as file:
        message = file.read()
        validated_data = validate_json(message)
        validate_consumed_data(validated_data)
        print("Consumed data is valid.")
except (AssertionError, FileNotFoundError) as e:
    print("Error validating consumed data:", e)












import json

def load_expected_data(file_path):
    try:
        with open(file_path, "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

def validate_json(data, expected_data):
    assert expected_data, "Expected data is missing or invalid."
    assert data == expected_data, "Data does not match the expected result."

def validate_consumed_data(data, expected_data):
    # Assuming expected data is the same for consumed and unprocessed tiers
    validate_json(data, expected_data)

def validate_unprocessed_data(data, expected_data):
    validate_json(data, expected_data)

def validate_bronze_data(data, expected_data):
    validate_json(data, expected_data)

def validate_silver_data(data, expected_data):
    validate_json(data, expected_data)

def validate_gold_data(data, expected_data):
    validate_json(data, expected_data)

# Load expected data from JSON files
expected_unprocessed_data = load_expected_data("unprocessed.json")
expected_bronze_data = load_expected_data("bronze.json")
expected_silver_data = load_expected_data("silver.json")
expected_gold_data = load_expected_data("gold.json")

try:
    with open("produced_message.json", "r") as file:
        message = file.read()
        validated_data = validate_json(message, expected_unprocessed_data)
        print("Consumed data is valid.")
    validate_unprocessed_data(validated_data, expected_bronze_data)
    print("Unprocessed data is valid.")
    validate_bronze_data(validated_data, expected_silver_data)
    print("Bronze data is valid.")
    validate_silver_data(validated_data, expected_gold_data)
    print("Silver data is valid.")
    validate_gold_data(validated_data, expected_gold_data)
    print("Gold data is valid.")
except AssertionError as e:
    print("Validation error:", e)



from confluent_kafka import Consumer, KafkaError

# Define Kafka configuration with the correct broker details
kafka_config = {
    'bootstrap.servers': 'localhost:9092',  # Replace with your Kafka broker(s)
    'group.id': 'test-group',
    'auto.offset.reset': 'earliest',
}

# Kafka topic that is already producing messages
existing_topic = 'your-existing-topic'

# Function to test Kafka consumer connection to the topic
def test_kafka_consumer_connection(kafka_config, topic):
    try:
        consumer = Consumer(kafka_config)
        consumer.subscribe([topic])

        print(f"Kafka consumer connected to topic '{topic}' successfully.")

    except Exception as e:
        print(f"Kafka consumer connection to topic '{topic}' failed. Test failed: {str(e)}")

# Run the Kafka consumer connection test
test_kafka_consumer_connection(kafka_config, existing_topic)



import json

def load_expected_data(file_path):
    try:
        with open(file_path, "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

def validate_json(data, expected_data):
    assert expected_data, "Expected data is missing or invalid."
    assert data == expected_data, "Data does not match the expected result."

def validate_consumed_data(data, expected_data):
    # Assuming expected data is the same for consumed and unprocessed tiers
    validate_json(data, expected_data)

def validate_unprocessed_data(data, expected_data):
    validate_json(data, expected_data)

def validate_bronze_data(data, expected_data):
    validate_json(data, expected_data)

def validate_silver_data(data, expected_data):
    validate_json(data, expected_data)

def validate_gold_data(data, expected_data):
    validate_json(data, expected_data)

# Load expected data from JSON files
expected_unprocessed_data = load_expected_data("unprocessed.json")
expected_bronze_data = load_expected_data("bronze.json")
expected_silver_data = load_expected_data("silver.json")
expected_gold_data = load_expected_data("gold.json")

try:
    with open("produced_message.json", "r") as file:
        message = file.read()
        validated_data = validate_json(message, expected_unprocessed_data)
        print("Consumed data is valid.")
    validate_unprocessed_data(validated_data, expected_bronze_data)
    print("Unprocessed data is valid.")
    validate_bronze_data(validated_data, expected_silver_data)
    print("Bronze data is valid.")
    validate_silver_data(validated_data, expected_gold_data)
    print("Silver data is valid.")
    validate_gold_data(validated_data, expected_gold_data)
    print("Gold data is valid.")
except AssertionError as e:
    print("Validation error:", e)
