Tools inventory Excel Parser
-----------------



# Assume df is your DataFrame with the 'Order Number' column
data = {'Order Number': ['EC-123456', 'EC-789012', 'canceled', 'EC-345678', 'other']}
df = pd.DataFrame(data)

# Define a regular expression pattern for the desired format
pattern = r'^EC-\d{6}$'

# Use str.contains to filter rows based on the pattern
filtered_df = df[df['Order Number'].str.contains(pattern, na=False)]

# Assume finance_df is your other DataFrame with the 'PO/SR' column
finance_data = {'PO/SR': ['EC-123456', 'SA-789012', 'canceled', 'EC-345678', 'other']}
finance_df = pd.DataFrame(finance_data)

# Check if elements in the 'Order Number' column of filtered_df match any elements in 'PO/SR' column of finance_df
matched_rows = filtered_df[filtered_df['Order Number'].isin(finance_df['PO/SR'])]

# Display the resulting DataFrame
print(matched_rows)



matched_rows['Combined Descriptions'] = matched_rows['Description'] + " " + finance_df['Item Description / Projects Batch']

# Print the count of matching rows
print("Number of matches:", len(matched_rows))

# Display the resulting DataFrame
print(matched_rows[['Order Number', 'Description', 'Combined Descriptions']])

----------
file_path = r'C:\Users\brian.porter2\Documents\TOOLS\Tools_Inventory_CLEANED.xlsx'

# Save the DataFrame to the specified Excel file and sheet
matched_rows[['Order Number', 'Description', 'Combined Descriptions']].to_excel(file_path, sheet_name='Sheet2', index=False)

print("Data saved to Excel file:", file_path)
--------

from openpyxl import load_workbook

# ... (Assume df, pattern, filtered_df, and finance_df are defined as in the previous examples)

# Create a new column 'Combined Descriptions' by combining 'Description' and 'Item Description / Projects Batch'
matched_rows['Combined Descriptions'] = matched_rows['Description'] + " " + finance_df['Item Description / Projects Batch']

# Define the file path
file_path = r'C:\Users\brian.porter2\Documents\TOOLS\Tools_Inventory_CLEANED.xlsx'

# Load the existing workbook
with pd.ExcelWriter(file_path, engine='openpyxl', mode='a') as writer:
    # Write the DataFrame to the specified sheet ('Sheet2') without the index
    matched_rows[['Order Number', 'Description', 'Combined Descriptions']].to_excel(writer, sheet_name='Sheet2', index=False)

print("Data appended to Excel file:", file_path)



----------------------
import pandas as pd
from openpyxl import load_workbook

# ... (Assume df, pattern, filtered_df, and finance_df are defined as in the previous examples)

# Create a new column 'Combined Descriptions' by combining 'Description' and 'Item Description / Projects Batch'
matched_rows['Combined Descriptions'] = matched_rows['Description'] + " " + finance_df['Item Description / Projects Batch']

# Define the file path
file_path = r'C:\Users\brian.porter2\Documents\TOOLS\Tools_Inventory_CLEANED.xlsx'

# Load the existing workbook
try:
    with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
        # Try to open an existing workbook
        writer.book = load_workbook(file_path)

        # Check if 'Sheet2' exists
        if 'Sheet2' in writer.book.sheetnames:
            # Append the DataFrame to the existing 'Sheet2'
            matched_rows[['Order Number', 'Description', 'Combined Descriptions']].to_excel(writer, sheet_name='Sheet2', index=False)

        else:
            # If 'Sheet2' does not exist, create it and write the DataFrame
            matched_rows[['Order Number', 'Description', 'Combined Descriptions']].to_excel(writer, sheet_name='Sheet2', index=False)

    print("Data appended to/created 'Sheet2' in Excel file:", file_path)

except FileNotFoundError:
    # If the file does not exist, create it with 'Sheet2' and write the DataFrame
    matched_rows[['Order Number', 'Description', 'Combined Descriptions']].to_excel(file_path, sheet_name='Sheet2', index=False)

    print("File created with 'Sheet2' and data written:", file_path)

-----------
import textwrap
# Format the 'Combined Descriptions' column with line breaks every 75 characters
matched_rows['Formatted Descriptions'] = matched_rows['Combined Descriptions'].apply(lambda x: '\n'.join(textwrap.wrap(x, width=75)))

---------------------------
matched_rows['Combined Descriptions'] = matched_rows['Description'] + " " + finance_df['Item Description / Projects Batch']

# Split 'Combined Descriptions' into 'Item' and 'Description' based on the first space
matched_rows[['Item', 'Description']] = matched_rows['Combined Descriptions'].str.split(n=1, expand=True)

# Format the 'Description' column with line breaks every 75 characters
matched_rows['Formatted Descriptions'] = matched_rows['Description'].apply(lambda x: '\n'.join(textwrap.wrap(x, width=75)))


pattern = r'^(.*?(\d{1,2}/\d{1,2}/\d{2,4}|$))'
matched_rows[['Item', 'Description']] = matched_rows['Combined Descriptions'].str.extract(pattern)
