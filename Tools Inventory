Tools inventory Excel Parser
-----------------



# Assume df is your DataFrame with the 'Order Number' column
data = {'Order Number': ['EC-123456', 'EC-789012', 'canceled', 'EC-345678', 'other']}
df = pd.DataFrame(data)

# Define a regular expression pattern for the desired format
pattern = r'^EC-\d{6}$'

# Use str.contains to filter rows based on the pattern
filtered_df = df[df['Order Number'].str.contains(pattern, na=False)]

# Assume finance_df is your other DataFrame with the 'PO/SR' column
finance_data = {'PO/SR': ['EC-123456', 'SA-789012', 'canceled', 'EC-345678', 'other']}
finance_df = pd.DataFrame(finance_data)

# Check if elements in the 'Order Number' column of filtered_df match any elements in 'PO/SR' column of finance_df
matched_rows = filtered_df[filtered_df['Order Number'].isin(finance_df['PO/SR'])]

# Display the resulting DataFrame
print(matched_rows)



matched_rows['Combined Descriptions'] = matched_rows['Description'] + " " + finance_df['Item Description / Projects Batch']

# Print the count of matching rows
print("Number of matches:", len(matched_rows))

# Display the resulting DataFrame
print(matched_rows[['Order Number', 'Description', 'Combined Descriptions']])

----------
file_path = r'C:\Users\brian.porter2\Documents\TOOLS\Tools_Inventory_CLEANED.xlsx'

# Save the DataFrame to the specified Excel file and sheet
matched_rows[['Order Number', 'Description', 'Combined Descriptions']].to_excel(file_path, sheet_name='Sheet2', index=False)

print("Data saved to Excel file:", file_path)
--------

from openpyxl import load_workbook

# ... (Assume df, pattern, filtered_df, and finance_df are defined as in the previous examples)

# Create a new column 'Combined Descriptions' by combining 'Description' and 'Item Description / Projects Batch'
matched_rows['Combined Descriptions'] = matched_rows['Description'] + " " + finance_df['Item Description / Projects Batch']

# Define the file path
file_path = r'C:\Users\brian.porter2\Documents\TOOLS\Tools_Inventory_CLEANED.xlsx'

# Load the existing workbook
with pd.ExcelWriter(file_path, engine='openpyxl', mode='a') as writer:
    # Write the DataFrame to the specified sheet ('Sheet2') without the index
    matched_rows[['Order Number', 'Description', 'Combined Descriptions']].to_excel(writer, sheet_name='Sheet2', index=False)

print("Data appended to Excel file:", file_path)



----------------------
import pandas as pd
from openpyxl import load_workbook

# ... (Assume df, pattern, filtered_df, and finance_df are defined as in the previous examples)

# Create a new column 'Combined Descriptions' by combining 'Description' and 'Item Description / Projects Batch'
matched_rows['Combined Descriptions'] = matched_rows['Description'] + " " + finance_df['Item Description / Projects Batch']

# Define the file path
file_path = r'C:\Users\brian.porter2\Documents\TOOLS\Tools_Inventory_CLEANED.xlsx'

# Load the existing workbook
try:
    with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
        # Try to open an existing workbook
        writer.book = load_workbook(file_path)

        # Check if 'Sheet2' exists
        if 'Sheet2' in writer.book.sheetnames:
            # Append the DataFrame to the existing 'Sheet2'
            matched_rows[['Order Number', 'Description', 'Combined Descriptions']].to_excel(writer, sheet_name='Sheet2', index=False)

        else:
            # If 'Sheet2' does not exist, create it and write the DataFrame
            matched_rows[['Order Number', 'Description', 'Combined Descriptions']].to_excel(writer, sheet_name='Sheet2', index=False)

    print("Data appended to/created 'Sheet2' in Excel file:", file_path)

except FileNotFoundError:
    # If the file does not exist, create it with 'Sheet2' and write the DataFrame
    matched_rows[['Order Number', 'Description', 'Combined Descriptions']].to_excel(file_path, sheet_name='Sheet2', index=False)

    print("File created with 'Sheet2' and data written:", file_path)

-----------
import textwrap
# Format the 'Combined Descriptions' column with line breaks every 75 characters
matched_rows['Formatted Descriptions'] = matched_rows['Combined Descriptions'].apply(lambda x: '\n'.join(textwrap.wrap(x, width=75)))

---------------------------
matched_rows['Combined Descriptions'] = matched_rows['Description'] + " " + finance_df['Item Description / Projects Batch']

# Split 'Combined Descriptions' into 'Item' and 'Description' based on the first space
matched_rows[['Item', 'Description']] = matched_rows['Combined Descriptions'].str.split(n=1, expand=True)

# Format the 'Description' column with line breaks every 75 characters
matched_rows['Formatted Descriptions'] = matched_rows['Description'].apply(lambda x: '\n'.join(textwrap.wrap(x, width=75)))


pattern = r'^(.*?(\d{1,2}/\d{1,2}/\d{2,4}|$))'
matched_rows[['Item', 'Description']] = matched_rows['Combined Descriptions'].str.extract(pattern)

------------------------
# Assuming 'Amount', 'Dept', 'Supplier' are columns in the 'finance_df' DataFrame
finance_columns_to_extract = ['Amount', 'Dept', 'Supplier']

# Extract the specified columns from the 'finance_df' DataFrame for the rows in 'matched_rows'
finance_extracted_columns_df = finance_df.loc[finance_df['PO/SR'].isin(matched_rows['Order Number']), finance_columns_to_extract]

# Merge the extracted columns from 'finance_df' into 'matched_rows' based on the 'Order Number'
matched_rows = pd.merge(matched_rows, finance_extracted_columns_df, left_on='Order Number', right_on='PO/SR', how='left')

# Drop the duplicate 'PO/SR' column introduced by the merge
matched_rows = matched_rows.drop('PO/SR', axis=1)
------------------------------------------------------------------------------------------------------------------------------------------------
01/18/24
import pandas as pd

# Assuming df1 and df2 are your two DataFrames
df1 = pd.DataFrame({'ID': [1, 2, 3], 'Description': ['Desc1', 'Desc2', 'Desc3']})
df2 = pd.DataFrame({'ID': [1, 2, 3], 'Item Description': ['ItemDesc1', 'ItemDesc2', 'ItemDesc3']})

# Merge on the 'ID' column
merged_df = pd.merge(df1, df2, left_on='ID', right_on='ID')

# Create a new column 'Combined Descriptions'
merged_df['Combined Descriptions'] = merged_df['Description'] + ' ' + merged_df['Item Description']

# Drop the original columns if you don't need them anymore
merged_df = merged_df.drop(['Description', 'Item Description'], axis=1)

# Resulting DataFrame will have a new column 'Combined Descriptions'
print(merged_df)

df.rename(columns={'OldColumnName': 'NewColumnName'}, inplace=True)
------------------------------------------------------------------------------------------------------------------------------------------------
import pandas as pd
from ipywidgets import FileUpload
import io

# Create a FileUpload widget
file_upload = FileUpload()

# Display the widget
display(file_upload)

def handle_upload(change):
    uploaded_file = next(iter(file_upload.value))
    
    # Read the uploaded file into a Pandas DataFrame
    content = file_upload.value[uploaded_file]['content']
    df = pd.read_excel(io.BytesIO(content))
    
    # Do further processing with the DataFrame (e.g., display it, analyze it, etc.)
    display(df)

# Attach the handler function to the upload widget
file_upload.observe(handle_upload, names='_counter')




------------------------------------------------------------------------------------------------------------------------------------------------
import pandas as pd
from ipywidgets import FileUpload
import io

# Create a FileUpload widget
file_upload = FileUpload()

# Display the widget
display(file_upload)

def handle_upload(change):
    uploaded_file = next(iter(file_upload.value))
    
    # Read the uploaded file into a Pandas DataFrame
    content = file_upload.value[uploaded_file]['content']
    df = pd.read_excel(io.BytesIO(content))
    
    # Do further processing with the DataFrame (e.g., display it, analyze it, etc.)
    display(df)

# Attach the handler function to the upload widget
file_upload.observe(handle_upload, names='_counter')

pip install ipywidgets pandas
jupyter nbextension enable --py widgetsnbextension
------------------------------------------------------------------------------------------------------------------------------------------------
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, display_html
import io

# Create a FileUpload widget
file_upload = widgets.FileUpload()

# Create a button for processing the uploaded file
process_button = widgets.Button(description="Process File")

def handle_upload(change):
    uploaded_file = file_upload.value
    
    # Check if a file is uploaded
    if uploaded_file:
        # Read the uploaded file into a Pandas DataFrame
        content = uploaded_file[list(uploaded_file.keys())[0]]['content']
        global df
        df = pd.read_excel(io.BytesIO(content))
        
        # Display information about the uploaded file
        display_html(f'File "{list(uploaded_file.keys())[0]}" uploaded successfully.', raw=True)

# Attach the handler function to the upload widget
file_upload.observe(handle_upload, names='_counter')

def process_file(button):
    try:
        # Display the DataFrame
        display(df)
    except NameError:
        print("Please upload a file before processing.")

# Attach the handler function to the process button
process_button.on_click(process_file)

# Display widgets
display(file_upload)
display(process_button)
------------------------------------------------------------------------------------------------------------------------------------------------
import ipywidgets as widgets
from IPython.display import display
import io
import pandas as pd

# Cell 1: Widget for file upload
uploader = widgets.FileUpload(
    accept='*.csv',  # Accepted file extension, e.g., '.txt', '.pdf', 'image/*', 'image/*,.pdf'
    multiple=False  # True to accept multiple files upload else False
)

display(uploader)

# Cell 2: File processing
def process_uploaded_file(change):
    input_file = list(uploader.value.values())[0]
    
    # Check if a file is uploaded
    if input_file:
        content = input_file['content']
        content = io.StringIO(content.decode('utf-8'))
        df = pd.read_csv(content)
        
        # Display the DataFrame
        display(df)
    else:
        print("Please upload a file before processing.")

# Attach the handler function to the upload widget
uploader.observe(process_uploaded_file, names='_counter')

------------------------------------------------------------------------------------------------------------------------------------------------ 02/21/24
from ipywidgets import FileUpload
from IPython.display import display

# Create an instance of FileUpload
uploader = FileUpload(
    accept='*.csv',  # Accepted file extension, e.g., '.txt', '.pdf', 'image/*', 'image/*,.pdf'
    multiple=False  # True to accept multiple files upload else False
)

# Display the file upload widget
display(uploader)

# Define a function to handle the file upload event
def handle_file_upload(change):
    uploaded_filename = next(iter(uploader.value))
    uploaded_file_path = uploader.value[uploaded_filename]['metadata']['name']
    
    # Print the absolute path of the uploaded file
    print("Absolute path of the uploaded file:", uploaded_file_path)

# Attach the event handler to the file upload widget
uploader.observe(handle_file_upload, names='_counter')








